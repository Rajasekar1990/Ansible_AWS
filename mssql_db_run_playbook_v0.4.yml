  ############################# MSSQL DB WORKFLOW TASKS #################################################
  #  TASK1: Fetch Current Date and Time to pass when needed to create unique naming for files
  #  TASK2: Connect MSSQL DB Server using Sqlcmd using db cred
  #  TASK3: Check db connection status is successful
  #  TASK4: Fetch .sql files from directory path provided
  #  TASK5: Create sqlfilename_list.yml with a key i.e. column name as 'sqlfilename' for list-dict 
  #  TASK6: Update sqlfilename_list.yml with all *.sql filenames in list-dict
  #  TASK7: Create sql_results folder if not exists to store resutls
  #  TASK8: Execute .sql files fetched in sequential manner and redirect the output to a each file in 'sql_results\<SQLfilename>_<DDMMYYYY>_<hhmmss>' format
  #  TASK9: Check SQL statement execution status
  #######################################################################################################
---
- name: 'DB_playbook v0.4'
  hosts: all
  # connection: remote
  become_method: runas
  gather_facts: no
  # vars:
  # -
  vars_files:
  - variables.yml
  - sqlfilename_list.yml
  tasks:
  - name: 'Get current date&time'
    ansible.builtin.setup:
      gather_subset:
        - 'date_time'
    register: 'datetime_var'
    when: inventory_hostname in groups['db_servers'] 
  - name: 'Store ansible_facts of ansible targets'
    debug: var=datetime_var
    when: inventory_hostname in groups['db_servers']
  - name: 'Store datetime in ddmmyyyy_hhmmss format'
    debug: msg='{{ datetime_var.ansible_facts.ansible_date_time.day }}{{ datetime_var.ansible_facts.ansible_date_time.month }}{{ datetime_var.ansible_facts.ansible_date_time.year }}_{{ datetime_var.ansible_facts.ansible_date_time.hour }}{{ datetime_var.ansible_facts.ansible_date_time.minute }}{{ datetime_var.ansible_facts.ansible_date_time.second }}'
    when: inventory_hostname in groups['db_servers']
  
  - name: 'Connect MSSQL DB Server'
    win_shell:
      'Sqlcmd -S {{ mssql_login_host }},{{ mssql_port }} -U {{ mssql_login_user }} -P {{ mssql_login_password }}'
    no_log: true
    register: connection_check
    when: inventory_hostname in groups['db_servers']
    any_errors_fatal: true

  # - name: 'Check DB connection status'
  #   debug: var=connection_check
  #   no_log: true
  #   when: 
  #     - inventory_hostname in groups['db_servers']
  - name: 'Check DB connection status successful'
    debug: msg='{{ mssql_login_host }} connection is successful'
    when: 
      - inventory_hostname in groups['db_servers']
      - item == '0'
    with_items:
      - '{{ connection_check.rc }}'
  - name: 'Check DB connection status failed'
    debug: msg='{{ mssql_login_host }} connection is failed'
    when: 
      - inventory_hostname in groups['db_servers']
      - item != '0'
    with_items:
      - '{{ connection_check.rc }}'

  ###############################################################################
  # - name: 'Check .sql syntax before execution'
  #   win_lineinfile:
  #     path: '{{ sql_filepath }}'
  #     regex: 'COMMIT'
  #     line: 'COMMIT not found'
  #     state: present
  #   register: presence
  #   # changed_when: false
  #   check_mode: true
  #   # failed_when: "'COMMIT' in presence.msg"
  #   when: inventory_hostname in groups['db_servers']
  #   with_items:
  #     - '{{ sqlfilename | replace(".sql", "") }}'

  # - name: 'Show result, if not found'
  #   debug:
  #     var: presence
  #   when: inventory_hostname in groups['db_servers']
  ###############################################################################
  
  - name: 'Get all *.sql filenames from the target location'
    win_find:
      paths: C:\sql_stmts\
      patterns: [ '*.sql' ]
    register: file_list
    when: inventory_hostname in groups['db_servers']
  - debug: var=file_list
    when: inventory_hostname in groups['db_servers']
  - debug: msg="filename {{ item.0}}" 
    when: 
      - inventory_hostname in groups['db_servers'] 
    with_together:
      - "{{ file_list | json_query('files[*].filename') }}"
  
  - name: 'Create a dict in sqlfilename_list.yml on ansible controller'
    lineinfile:
      path: '/home/ubuntu/ansible/sqlfilename_list.yml'
      create: true
      line: 'sqlfilename:'
      insertbefore: "BOF"
    when: 
      - inventory_hostname in groups['localhosts']

  - name: 'Add filenames fetched as a listed-dict into sqlfilename_list.yml on ansible controller'
    lineinfile:
      path: '/home/ubuntu/ansible/sqlfilename_list.yml'
      create: true
      line: '- {{ item.0 }}'
      insertafter: "EOF"
    when: 
      - inventory_hostname in groups['localhosts']
    with_together:
      - "{{ hostvars.ansible_remoteserver.file_list | json_query('files[*].filename') }}"
      
  - name: 'Create sql_results folder if not exists'
    win_file:
      path: 'C:\sql_results'
      state: directory
    when: inventory_hostname in groups['db_servers']
    any_errors_fatal: true
    
  - name: 'Execute .sql file'
    win_shell:
       'Sqlcmd -U {{ mssql_login_user }} -P {{ mssql_login_password }} -i {{ sql_filepath }} -o {{ sql_outputpath }}'
    register: output
    no_log: true
    when: 
      - inventory_hostname in groups['db_servers']
    with_together:
      - '{{ sqlfilename | replace(".sql", "") }}'

  # - name: 'SQL Statement execution check status'
  #   debug: var=output
  #   no_log: true
  #   when: 
  #     - inventory_hostname in groups['db_servers']
  - name: 'SQL Statement execution output message if successful'
    debug: msg='{{ item.0 }}.sql executed successfully'
    when: 
      - inventory_hostname in groups['db_servers']
      - item.1 == 0
    with_together:
      - '{{ sqlfilename | replace(".sql", "") }}'
      - "{{ output | json_query('results[*].rc') }}"
  - name: 'SQL Statement execution output message if failed'
    debug: msg='{{ item.0 }}.sql executed failed'
    when: 
      - inventory_hostname in groups['db_servers']
      - item.1 != 0
    with_together:
      - '{{ sqlfilename | replace(".sql", "") }}'
      - "{{ output | json_query('results[*].rc') }}"