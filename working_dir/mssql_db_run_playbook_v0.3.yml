  ############################# MSSQL DB WORKFLOW TASKS FULLY EXECUTED USING MSSQL_DB ANSIBLE MODULE ####
  #  TASK1: Connect MSSQL DB Server using mssql_db module 
  #  TASK2: Import .sql file 
  #  TASK3: Check import is successful
  #######################################################################################################
---
- name: 'DB_playbook v0.3 fully using mssql ansible module'
  hosts: all
  # connection: remote
  become_method: runas
  gather_facts: no
  vars_files:
  - variables.yml
  - sqlfilename_list.yml
  - mssql_query.yml
  tasks:
  # - name: 'Check .sql syntax before execution'
  #   win_lineinfile:
  #     path: '{{ sql_filepath }}'
  #     regex: ';'
  #     line: '; not found'
  #     state: present
  #   register: presence
  #   # changed_when: false
  #   check_mode: true
  #   # failed_when: "'COMMIT' in presence.msg"
  #   when: inventory_hostname in groups['remote_servers']
  #   with_items:
  #     - '{{ sqlfilename | replace(".sql", "") }}'

  # - name: 'Show result, if not found'
  #   debug:
  #     var: presence
  #   when: inventory_hostname in groups['remote_servers']
  
  # - name: 'Create sql_results folder if not exists'
  #   win_file:
  #     path: 'C:\sql_results'
  #     state: directory
  #   when: inventory_hostname in groups['remote_servers']
  #   any_errors_fatal: true

  # - name: 'execute .sql query from mssql_query.yml on controller'
  #   community.general.mssql_script:
  #     login_user: "{{ mssql_login_user }}"
  #     login_password: "{{ mssql_login_password }}"
  #     login_host: "{{ mssql_login_host }}"
  #     login_port: "{{ mssql_port }}"
  #     db: "{{ mssql_db }}"  
  #     script: '{{ item }}'
  #   register: query_output
  #   when: inventory_hostname in groups['localhosts']
  #   with_items:
  #       - '{{ querylist }}'

  - name: 'execute {{ item }} file from controller'
    community.general.mssql_db:
      login_host: '{{ mssql_login_host }}'
      login_user: '{{ mssql_login_user }}'
      login_password: '{{ mssql_login_password }}'
      login_port: '{{ mssql_port }}'
      name: '{{ mssql_db }}'
      state: import
      target: '{{ item.0 }}'
      autocommit: true
    register: sql_query_output
    ignore_errors: true
    when: inventory_hostname in groups['localhosts']
    with_together:
      - '/home/ubuntu/ansible/sql_stmts/New_folder/sql_file1.sql'

  - debug: var=sql_query_output
    when: inventory_hostname in groups['localhosts']
    with_together:
      - '/home/ubuntu/ansible/sql_stmts/New_folder/sql_file1.sql'
  - debug: msg='{{ item.0 }} file executed successfully'
    when: 
      - inventory_hostname in groups['localhosts']
      - item.1 == "import successful"
    with_together:
      - '/home/ubuntu/ansible/sql_stmts/New_folder/sql_file1.sql'
      - "{{ sql_query_output | json_query('results[*].msg') }}"
  - debug: msg='{{ item.0 }} file executed failed with exception {{ sql_query_output | json_query('results[*].exception') }}"'
    when: 
      - inventory_hostname in groups['localhosts']
      - item.1 != "import successful"
    with_together:
      - '/home/ubuntu/ansible/sql_stmts/New_folder/sql_file1.sql'
      - "{{ sql_query_output | json_query('results[*].msg') }}"

  # - name: 'dump file to database {{ mssql_db }}'
  #   community.general.mssql_db:
  #     login_host: '{{ mssql_login_host }}'
  #     login_user: '{{ mssql_login_user }}'
  #     login_password: '{{ mssql_login_password }}'
  #     login_port: '{{ mssql_port }}'
  #     name: '{{ mssql_db }}'
  #     # state: dump
  #     target: /home/ubuntu/ansible/dump1.sql
  #   register: dump_output
  #   when: inventory_hostname in groups['localhosts']